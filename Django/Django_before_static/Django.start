# 파싱오류와 예외
    # 파싱오류 : 실행조차 되지 않는 치명적인 실수
    # 예외 : 일단 실행은 되는데, 나중에 가서 문제가 생길 수도 있음
        # 이에 대한 해결방법
            - try : 
                # 일단 시도해 볼 것
                # 오류가 생길 여지가 있는 코드
            - except : 
                # 어떤 오류가 발생해도 실행할 코드
            - finally:
                # 예외거 발생하든 안했든
                # 최종적으로 무조건 실행할 콛,

                # 예를 들어, 
                
                try : 
                    4/0
                except ZeroDivisionError(옲 아름)

                    print("0으로 나눌 수 없습니다.")
                finally:
                    print("계산 끝")
                    -> try, except, finally : 프로그램을 멈춤없이 실행시킬 수 있기 때문에 사용한다.

# 파이썬 = 객체지향언어
    # 이 세상에 있는 모든 대상들은 상태와 동작으로 나타낼 수 있다
    -> 변수와 함수로 상태와 동작을 나타낼 수 있어야 함
    -> 상태와 동작(변수와 함수)을 한 번에 여러 개 정의할 수 있는 방법
     == 객체 지향 프로그래밍


# 모듈
    import 모듈 이름
# 패키지 
    ex)
    Myproject라는 폴더에 Data라는 패키지 안에 save.py, get.py, delete.py 세개가 있으면
        import data.save / import data.get /import data.delete 로 호출 가능
# 라이브러리 
    쓸만한 기능들을 미리 모듈/패키지를 만들어둔 것
    1. Python Standard Library 파이썬 내장 함수
    2. Python Package Index 사람들이 모듈, 패키지를 만든 것 // 줄여서 PPI // (PyPI)
        $ pip install SomePackage
        $ pip uninstall SomePackage
        $ pip install SomePackage == 1.0.4
        $ pip search SomePackage / 검색
        $ pip freeze => 내가 다운 받은 pip 의 종류를 알려줌

------------------------------------------------------------------------------
<What is WEB?> 

# WEB = World Wide Web = 정보의 그물망
    - url : 정보 자원이 어디 있는지를 나타내는 표식
    - http : 정보자원으로 접근하고 통신하게 해주는 약속
        - http 요청 
            - get  : 가져다 줘  
            - post : (이 데이터) 처리해 줘!
    - html : 
            - 응답으로서의 정보 자원 자체
            - 다른 정보 자원과 연결 매개체
            - 우리 눈으로 읽을 수 있게 문서화 시켜주는 것
    - web browser :
            - HTTP 통신
            - HTML 보기 좋은 화면으로 보이기 (프로그래밍한 걸로 오지 않음)
    - web service : 
            - HTML과 URL을 미리 준비해놓고 사용자 요청에 대한 응답을 보낼 수 있는 프로그램

------------------------------------------------------------------------------

< What is Web Framework >

    - 프레임워크 :
        - 웹 서비스를 쉽게 만들어주는 기계 
        - 컴퓨터 프로그래밍에서, 소프트웨어 프레임워크는 복잡한 문제를 해결하거나 서술하는 데 사용되는 기본 개념 구조이다.
        - 간단한 뼈대, 골조라고 함
        - 정형화 되어있는 웹 개발을 효율적으로 하기 위해 미리 만들어 놓은 웹 개발의 기능단위, 설계 단위의 집합 / 개발 맨날 비슷해서 미리 만들어둔 것
    
    - 장고는 프레임워크 (명확한 목적을 달성하기 위해 이미 설계까지 만들어진 구조/ 뼈대)

------------------------------------------------------------------------------

<MVC, MTV>

    프레임워크 분류 (이렇게 세 가지로 분류한 것을 MVC 혹은 장고의 MTV 패턴이라고 함)
        1. DB와 상호작용하는 부분
        2. 사용자들 눈에 보이는 부분
        3. 내부 동작의 논리를 담당하는 부분

    이런 식으로 소프트웨어를 정형화시켜서 설계의 원칙을 세우는 것을 '디자인 패턴'이라고 부름
    장고의 '디자인 패턴' = MTV 패턴

    MVC = Model View Controller 
        M : Model 데이터베이스와 상호작용하는 부분
        V : View 사용자 인터페이스 담당
        C : Controller : 웹 서비스 내부의 논리 담당

    MTV = 
        M : Model 데이터베이스와 상호작용하는 부분
        Template : 사용자 인터페이스 담당
        View : 웹 서비스 내부 동작의 논리를 담당

------------------------------------------------------------------------------

python --version                     / version 확인

python -m venv myvenv               / myvenv라는 폴더를 만드는 것

source myvenv/bin/activate          / myvenv라는 폴더에 있는 bin이라는 폴더에 있는 activate 불러오기
django-admin startproject myproject(이 자리에는 파일 이름) (많이 쓸 예정) 

pip install django

------------------------------------------------------------------------------

        1. __init__.py -> 이렇게 생긴 파일이 있는 폴더가 패키지 폴더라는 것을 알려주는 용도 / 초기화 시켜주는 용도

        2. urls.py -> 우리가 가진 사이트에 대한 url이 모여있는 파일    
            www.codelion.net
            www.codelion.net/login
            www.codelion.net/payment 등의 여러 url을 모아두는 파일
        
        3. manage.py
            정말 중요
            기능)
            1. 서버 켜기
            2. Application 만들기 (프로젝트의 단위)
            3. Database 초기화 및 변경사항 반영
            4. 관리자 계정 만들기
            실행하는 방법 python manage.py runserver

------------------------------------------------------------------------------
1) 서버 켜기
    1. python manage.py runserver
    2. 터미널에 나온 사이트 복사 붙여넣기

2) Application 만들기
    1. python manage.py startapp () ->  (만들고 싶은 폴더 이름 / 결제 폴더 : payment, 게시판 : dashboard)
    2. 해당 폴더를 인식시켜주기 위해서 myproject라는 폴더 안에 있는 settings.py/INSTALLED_APPS 안에 해당 폴더 이름을 적어야 함
        payment라는 폴더_ 
        /models : 데이터 베이스와 관련된 것을 작성/ 
        /views : 장고 서비스 내부 동작을 관리하는 부/
    3. DB 초기화 및 변경사항 반영
        python manage.py migrate
    4. 관리자 계정 생성
        python manage.py createsuperuser

        # http://127.0.0.1:8000/admin (python manage.py runserver 했을 때 나오는 페이지) 했을 때
        # admin.site.urls를 실행한다는 뜻
        # 위 사이트에 접속하게 되면, superuser를 관리해주는 사이트가 나옴

--------------------------------------- ---------------------------------------

settings.py 안 내용 파악
    
    BASE_DIR : 프로젝트의 기본 위치 manage.py 가 있는 루트를 적어주면 됨
    SECRET_KEY : 암호를 생성할 때(즉, hash를 생성할 때) 만들어주는 문자열이라고 함 
    DEBUG : 개발자용으로 켤 것인지, 배포용으로 켤 것인지 / 중요
        DEBUG = TRUE  (개발자용)
        DEBUG = FALSE (배포용)   / 해킹에 취약함 - 배포할 때 꼭 켜놔야 함
    DATABASES : 어떤 데이터베이스를 쓸 것인지, 그 데이터베이스는 어디에 있는건지
        기본적으로 db.sqlite3를 사용함
    Internationalization 
        Language_code = 'ko-kr' 
        Time_Zone = 'Asia/Seoul' -> 이렇게 바꿔주면 해당 사이트의 언 어와 시간이 변경됨
    Static_url : css, JavaScript, Images 등 외부자원들의 url을 모아두는곳

--------------------------------------- ---------------------------------------

1. clear
1-1. python -m venv myvenv
2. pip install Django
3. cd codelion
4. cd Django
5. Django-admin startproject helloworld
6. python manage.py runserver
7. ctrl + C
8. python manage.py startapp myapp
9. helloworld 안에 있는 settings.py 파일에 있는 INSTALLED_APPS 에 myapp 을 추가 해야 됨
10. myapp 안에 templats라는 파일을 만들어서 index.html 문서를 만들어줌
11. myapp.views.py 안에 해당 논리를 작성해줘야함
    def home(request):
        return render(request, 'index.html')
    -> index.html을 요청할 경우에 이걸 보여준다

12. 해당 명령이 언제 실행되는지도 중요하기 때문에 urls.py로 들어가야 함
    예를 들어 http://127.0.0.1:8000/text -> 이렇게 치면 해당 html 사이트를 호출시킬 수 있음
    urls.py를 보면 알 수 있듯이
    path('', myapp.views.home, name = "hello_world"),
--------------------------------------- ---------------------------------------

<django 실습> 

0.cd CODELION / cd Django
1. python -m venv myvenv
2. source myvenv/bin/activate 씀 ## 끄는 법은 deactivate
3. pip install django
4. pip freeze
5. django-admin startproject ()
6. python manage.py runserver
    6.1 migrate
    6.2 runserver
    6.3 startapp 
        6.3.1 startapp을 실행시킨 후 만든 어플리케이션에 대한 정보값을 settings에 입력해줘야함
7. myapp 폴더 안에 templates를 만들어줘야 함
8. 이후 templates 에 html 문서를 만들었다면, 
    8.1 함수를 만들어줘서 html 형식이 읽히게 만들어야 함
    8.2 
    def first(request):
        return render(request, 'first.html')
        first라는 함수를 요청할 때 요청과 html를 표시해준다. 

 views안에 있는 함수를 url과 연결되게끔 만들어줘야 함 
        8.1.1 from myapp import views
        8.1.2 path('', views.first라는 함수를 인식하라)

------------------------------------------------------------------------------------

하지만 이런 식으로 url을 관리하는 건 추후에 문제가 생길 여지가 있음..
    그래서 application을 통해 url을 계층적으로 관리해야함

1. python manage.py startapp ()
2. settings에 app 입력
3. 각 폴더 안에 urls.py 파일을 만들어줌
4. myapp 안에 있는 urls.py 안 from django.urls import path처럼 include를 추가해줌
5. path('product/', include('product.urls'))

6. 그리고 product안에 있는 urls로 들어가서
    6.1 from product import views
    6.2 path('', views.(함수이름))
    6.3 views에 들어가서 함수 설정하기
    6.4 product 파일 안에 templates라는 폴더 만들어서 거기서 html 파일 설정해주면
    끝

------------------------------------------------------------------------------------


         